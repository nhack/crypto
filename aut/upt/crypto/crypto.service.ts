import {EncriptionFunction} from './encryptionFunction';

/**
 * The CryptoService interface represents a set of cryptographic primitives.
 */
export interface CryptoService {

    /**
     * Returns a Promise of the encrypted data corresponding to the cleartext, algorithm and key given as parameters.
     *
     * @param algo - is an object defining the encryption function to use or a DOMString, the latter being a shorthand for {"name": algo}. Supported values are:
     *  {"name": "AES-CBC", iv} where iv is an ArrayBuffer or an ArrayBufferView with 16 random bytes (these should be generated by RandomSource.getRandomValues()).
     *  {"name": "AES-CTR", counter, length}
     *  {"name": "AES-GCM", iv, additionalData, tagLength} (additionalData and tagLength are optional)
     *  {"name": "RSA-OAEP", label} (label is optional)
     * @param - key is a CryptoKey containing the key to be used for signing.
     * @param - cleartext is a ArrayBuffer or an ArrayBufferView containing the data to be encrypted, the cleartext.
     *
     * @return - result is a Promise that returns the ciphertext generated by the encryption of the cleartext as an ArrayBuffer.
     */
    encrypt(algo: EncriptionFunction, key: CryptoKey, cleartext: ArrayBuffer): Promise<ArrayBuffer>

    /**
     * Returns a Promise of the cleartext corresponding to the ciphertext, algorithm and key given as parameters.
     *
     * @param algo - is a DOMString defining the decryption function to use. Supported values are: AES-CBC, AES-CTR, AES-GCM, and RSA-OAEP.
     * @param key - is a CryptoKey containing the key to be used for decryption.
     * @param ciphertext - is a ArrayBuffer or an ArrayBufferView containing the data to be decrypted, the ciphertext.
     *
     * @return - is a Promise that returns the cleartext generated by the decryption of the ciphertext.
     */
    decrypt(algo: EncriptionFunction, key: CryptoKey, ciphertext: ArrayBuffer): Promise<ArrayBuffer>
}
